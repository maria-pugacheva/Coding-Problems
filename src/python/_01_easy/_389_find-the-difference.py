import doctest


# ---------------------------------------------------------------------
# Approach 1: Frequency Counter. Time: O(n + m). Space: O(1)        ***
# ---------------------------------------------------------------------
def solution_one(s: str, t: str) -> str:
    """Find the letter that was added to t after shuffling s to get t.

    String t is generated by random shuffling the characters in s and
    adding one more letter at a random position.

    Preconditions:
        s contains only lowercase English letters
        t contains only lowercase English letters

    Examples:
        >>> solution_one('', 'b')
        'b'
        >>> solution_one('a', 'ba')
        'b'
        >>> solution_one('abc', 'acbg')
        'g'
        >>> solution_one('abcd', 'abcde')
        'e'
    """
    lst = [0] * 26
    for ch in s:
        ind = ord(ch) - 97
        lst[ind] += 1
    for ch in t:
        ind = ord(ch) - 97
        lst[ind] -= 1
        if lst[ind] < 0:
            return ch
    return "No solution"


# ---------------------------------------------------------------------
# Approach 2: Bit Manipulation. Time: O(n). Space: O(1)             ***
# ---------------------------------------------------------------------
# Hint: Try finding XOR of all the characters in both strings (convert
#       each character to its corresponding ASCII value first).
# ---------------------------------------------------------------------
def solution_two(s: str, t: str) -> str:
    """Find the letter that was added to t after shuffling s to get t.

    String t is generated by random shuffling the characters in s and
    adding one more letter at a random position.

    Preconditions:
        s contains only lowercase English letters
        t contains only lowercase English letters

    Examples:
        >>> solution_one('', 'b')
        'b'
        >>> solution_two('a', 'ba')
        'b'
        >>> solution_two('abc', 'acbg')
        'g'
        >>> solution_two('abcd', 'abcde')
        'e'
    """
    a = 0
    for ch in s:
        a ^= ord(ch)
    for ch in t:
        a ^= ord(ch)
    return chr(a)


if __name__ == '__main__':
    doctest.testmod()
